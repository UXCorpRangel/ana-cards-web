---
import type { Creator, CreatorIcon, HorizontalAlignment } from '@contracts';
import { Icon } from 'astro-icon/components';

const BASE_URL = import.meta.env.BASE_URL;

const ICON_TITLES: Record<CreatorIcon, string> = {
  github: 'GitHub',
  linkedin: 'LinkedIn',
  website: 'Sitio web',
  twitter: 'X',
  twitch: 'Twitch',
  youtube: 'YouTube',
  behance: 'Behance',
  discord: 'Discord',
  instagram: 'Instagram',
  codepen: 'CodePen'
};

interface Props extends Creator {
  direction: HorizontalAlignment;
}
const { name, description, avatar, direction, links, birthdate } = Astro.props;
---

<article class:list={['creator', direction]} data-birthdate={birthdate}>
  <header>
    <div class="avatar-wrapper">
      <img src={`${BASE_URL}/assets/images/creators/${avatar}`} alt={name} class="avatar" />
    </div>

    <div class="creator-card">
      <h2>{name}</h2>

      <div class="networking">
        {
          links.map(({ href, icon }) => (
            <a
              href={href}
              target="_blank"
              rel="noreferer noopener"
              data-tooltip={ICON_TITLES[icon]}
            >
              <Icon name={`socials/${icon}`} size={42} />
            </a>
          ))
        }
      </div>
    </div>
  </header>

  <p>{description}</p>
</article>

<style>
  .creator {
    max-width: 45vw;
    user-select: none;

    & header {
      display: flex;
      align-items: center;
      gap: 2rem;

      & .avatar-wrapper {
        position: relative;

        &.party::after {
          content: '';
          width: 60%;
          height: 60%;
          position: absolute;
          background-image: url('/ana-cards-web/assets/images/party-hat.avif');
          background-size: 60%;
          background-position: center;
          background-repeat: no-repeat;
          inset-block-start: -45%;
        }

        & .avatar {
          object-fit: cover;
          aspect-ratio: 1 / 1;
          width: 12.5rem;
          border-radius: 0.75rem;
          outline: 0.4rem solid var(--design-color);
          outline-offset: 0.4rem;
          animation: glow-avatar 5s infinite;
        }
      }

      & .creator-card {
        display: flex;
        flex-direction: column;

        & h2 {
          font-family: var(--font-family-primary);
          font-size: 3rem;
        }

        & .networking {
          display: flex;
          gap: 1.5rem;

          & a {
            position: relative;
            text-decoration: none;
            color: var(--text-color);
            transition:
              color 0.2s ease-in-out,
              scale 0.2s ease-in-out,
              filter 0.2s ease-in-out;

            &:hover {
              scale: 1.2;
              color: var(--secondary-color);
              filter: drop-shadow(0 0 0.3rem var(--primary-color));

              &::before {
                opacity: 1;
                translate: -50% -1.5rem;
              }
            }

            &::before {
              content: attr(data-tooltip);
              position: absolute;
              width: max-content;
              pointer-events: none;

              scale: 0.7;
              opacity: 0;
              translate: -50% 0;
              color: currentColor;
              inset-block-start: 0;
              inset-inline-start: 50%;

              transition:
                opacity 0.2s ease-in-out,
                translate 0.2s ease-in-out;
            }
          }
        }
      }
    }

    & p {
      margin-top: 2rem;
      font-size: 1.2rem;
    }

    &.left {
      & header {
        flex-direction: row;

        & .avatar-wrapper {
          &.party::after {
            inset-inline-start: -42%;
            rotate: -45deg;
          }

          & .avatar {
            margin-inline-start: 0.4rem;
          }
        }

        & .creator-card {
          align-items: flex-start;
        }
      }

      & p {
        text-align: start;
      }
    }

    &.right {
      & header {
        flex-direction: row-reverse;

        & .avatar-wrapper {
          &.party::after {
            inset-inline-end: -42%;
            rotate: 45deg;
          }

          & .avatar {
            margin-inline-end: 0.4rem;
          }
        }

        & .creator-card {
          align-items: flex-end;
        }
      }

      & p {
        text-align: end;
      }
    }
  }

  @keyframes glow-avatar {
    0% {
      outline-color: var(--design-color);
      box-shadow:
        0 0 1rem rgb(from var(--design-color) r g b / 0.5),
        inset 0 0 1rem 0.5rem rgb(from var(--design-color) r g b / 0.5);
    }
    20% {
      outline-color: var(--development-color);
      box-shadow:
        0 0 1rem rgb(from var(--development-color) r g b / 0.5),
        inset 0 0 1rem 0.5rem rgb(from var(--development-color) r g b / 0.5);
    }
    40% {
      outline-color: var(--harley-color);
      box-shadow:
        0 0 1rem rgb(from var(--harley-color) r g b / 0.5),
        inset 0 0 1rem 0.5rem rgb(from var(--harley-color) r g b / 0.5);
    }
    60% {
      outline-color: var(--lore-color);
      box-shadow:
        0 0 1rem rgb(from var(--lore-color) r g b / 0.5),
        inset 0 0 1rem 0.5rem rgb(from var(--lore-color) r g b / 0.5);
    }
    80% {
      outline-color: var(--troll-color);
      box-shadow:
        0 0 1rem rgb(from var(--troll-color) r g b / 0.5),
        inset 0 0 1rem 0.5rem rgb(from var(--troll-color) r g b / 0.5);
    }
    100% {
      outline-color: var(--tools-color);
      box-shadow:
        0 0 1rem rgb(from var(--tools-color) r g b / 0.5),
        inset 0 0 1rem 0.5rem rgb(from var(--tools-color) r g b / 0.5);
    }
  }
</style>

<script define:vars={{ birthdate }}>
  const now = new Date();
  const creatorBirthday = new Date(`${birthdate}-${now.getFullYear()}`);
  const isBirthday = now.toLocaleDateString() === creatorBirthday.toLocaleDateString();
  if (isBirthday) {
    document
      .querySelectorAll(`.creator[data-birthdate="${birthdate}"] .avatar-wrapper`)
      ?.forEach(el => el.classList.add('party'));
  }
</script>
