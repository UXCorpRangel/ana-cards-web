---
import { CardCategory, cardCategoryColors } from '@contracts/card-category.type';
import {
  demoCategoryAccentColors,
  demoCategoryDescriptions,
  demoCategoryIcons,
  demoCategoryImages,
  demoCategoryTitles
} from '@data/demo-categories';

type Props = {
  defaultCategory: CardCategory;
};

const { defaultCategory } = Astro.props;

const BASE_URL = import.meta.env.BASE_URL;

const cardLevel = 6;
const defaultTitle = `Categoría ${demoCategoryTitles[defaultCategory]}`;
const defaultImage = demoCategoryImages[defaultCategory];
const defaultDescription = demoCategoryDescriptions[defaultCategory];
const defaultIcon = demoCategoryIcons[defaultCategory];
const defaultIconViewBox = defaultCategory === CardCategory.SPECIAL ? '0 0 58 38' : '0 0 24 24';

const cssVars = {
  '--category-color': cardCategoryColors[defaultCategory],
  '--accent-color': demoCategoryAccentColors[defaultCategory]
};
---

<div class="card-sample" data-category={defaultCategory} style={cssVars}>
  <div class="card" data-card-level={cardLevel}>
    <div class="indicators">
      <span class="title-indicator">Nombre</span>
      <span class="category-indicator">Categoría</span>
      <span class="level-indicator">Nivel</span>
      <span class="image-indicator">Imagen</span>
      <span class="content-indicator">Descripción</span>
      <span class="id-indicator">Número de carta</span>
    </div>

    <div class="card-front" data-card-level={cardLevel}>
      <h1 class="card-title">{defaultTitle}</h1>

      <div class="card-image">
        <img src={defaultImage} alt="Dibujo de la cabeza de un unicornio" loading="lazy" />
      </div>

      <p class="card-content">{defaultDescription}</p>

      <span class="card-footer">#710</span>

      <div class="card-category">
        <svg width="42" height="42" viewBox={defaultIconViewBox}>
          <Fragment set:html={defaultIcon} />
        </svg>
      </div>

      <div class="card-level-dots">
        {Array.from({ length: cardLevel }, () => <span class="card-level-dot" />).slice(0, 50)}
      </div>

      <div class="card-shine"></div>
    </div>

    <div class="card-back">
      <img class="logo" src={`${BASE_URL}/assets/images/logo.png`} />
    </div>
  </div>
</div>

<style>
  .card {
    --size: 280px;

    @media (width >= 768px) {
      --size: 391px;
    }

    --bgcolor: var(--card-bgcolor-1);
    --border-color: var(--card-border-color);
    --border-size: calc(var(--size) / 43);
    --border-radius: calc(var(--size) / 18);

    position: relative;
    aspect-ratio: 15 / 23;
    width: var(--size);
    container: card / inline-size;
    transform-style: preserve-3d;
    transition:
      transform 0.6s ease-in-out,
      scale 0.6s ease-in-out,
      opacity 0.6s ease-in-out;

    @starting-style {
      scale: 0;
      opacity: 0;
    }

    &.rotate {
      transform: rotateY(180deg);
    }

    & .indicators {
      z-index: 2;
      height: 100%;
      display: block;
      position: relative;
      backface-visibility: hidden;

      @media (width <= 576px) {
        display: none;
      }

      & .title-indicator,
      & .category-indicator,
      & .level-indicator,
      & .image-indicator,
      & .content-indicator,
      & .id-indicator {
        position: absolute;
        font-size: 1.2rem;
        font-family: var(--font-family-primary);
        z-index: var(--z-index-fab);
        user-select: none;

        &::before,
        &::after {
          content: '';
          position: absolute;
          background: var(--accent-color);
        }

        &::after {
          border-radius: 50%;
          width: 3cqi;
          height: 3cqi;
        }
      }

      & .title-indicator {
        width: 31cqi;
        inset-block-start: 5cqi;
        inset-inline-start: -27cqi;

        &::before {
          width: 60%;
          height: 1cqi;
          inset-block-start: 2.5cqi;
          inset-inline-start: 40%;
        }

        &::after {
          inset-block-start: 1.5cqi;
          inset-inline-end: 0;
        }
      }

      & .category-indicator {
        width: 30cqi;
        text-align: end;
        inset-block-start: 5cqi;
        inset-inline-end: -24cqi;

        &::before {
          width: 40%;
          height: 1cqi;
          inset-block-start: 2.5cqi;
          inset-inline-end: 55%;
        }

        &::after {
          inset-inline-start: 0;
          inset-block-start: 1.5cqi;
        }
      }

      & .level-indicator {
        width: 33cqi;
        inset-block-start: 21cqi;
        inset-inline-start: -27cqi;

        &::before {
          width: 60%;
          height: 1cqi;
          inset-block-start: 2.5cqi;
          inset-inline-start: 27%;
        }

        &::after {
          width: 3cqi;
          height: 18cqi;
          border-radius: 0;
          background: transparent;
          border: solid 1cqi;
          border-image-slice: 1;
          border-image-source: var(--accent-color);
          inset-block-start: -6cqi;
          inset-inline-end: 0.3cqi;
        }
      }

      & .image-indicator {
        width: 33cqi;
        text-align: end;
        inset-block-start: 30cqi;
        inset-inline-end: -21cqi;

        &::before {
          width: 60%;
          height: 1cqi;
          inset-block-start: 2.5cqi;
          inset-inline-end: 36%;
        }

        &::after {
          inset-inline-start: 0;
          inset-block-start: 1.5cqi;
        }
      }

      & .content-indicator {
        width: 33cqi;
        inset-block-end: 30cqi;
        inset-inline-start: -27cqi;

        &::before {
          width: 39%;
          height: 1cqi;
          inset-block-start: 2.5cqi;
          inset-inline-start: 57%;
        }

        &::after {
          inset-block-start: 1.5cqi;
          inset-inline-end: 0;
        }
      }

      & .id-indicator {
        height: 17.5cqi;
        display: flex;
        align-items: flex-end;
        inset-block-end: -15cqi;
        inset-inline-start: 50%;
        transform: translateX(-50%);

        &::before {
          width: 1cqi;
          height: 60%;
          inset-block-start: 1cqi;
          inset-inline-start: 50%;
          transform: translateX(-50%);
        }

        &::after {
          inset-block-start: 0;
          inset-inline-start: 50%;
          transform: translateX(-50%);
        }
      }
    }

    & .card-front,
    & .card-back {
      aspect-ratio: 15 / 23;
      width: var(--size);
      box-sizing: border-box;

      position: absolute;
      inset: 0;

      display: flex;
      overflow: hidden;
      user-select: none;
      pointer-events: none;
      flex-direction: column;
      backface-visibility: hidden;

      color: var(--text-color);
      background-color: var(--bgcolor);

      border-radius: var(--border-radius);
      border: var(--border-size) solid var(--border-color);

      animation: card-shadow-all 7s infinite alternate;
    }

    & .card-back {
      z-index: 0;
      align-items: center;
      justify-content: center;
      transform: rotateY(180deg);

      background-image: radial-gradient(
          48.42% 48.42% ellipse at center top,
          rgb(from var(--primary-color) r g b / 0.2) 0%,
          transparent 100%
        ),
        radial-gradient(
          48.42% 48.42% ellipse at center bottom,
          rgb(from var(--secondary-color) r g b / 0.2) 0%,
          transparent 100%
        );

      &::before {
        content: '';
        position: absolute;
        pointer-events: none;
        inset: 0;
        z-index: 1;
        opacity: 0.25;
        display: block;
        mix-blend-mode: multiply;
        background-blend-mode: overlay;
        background-clip: padding-box;
        background-image: var(--grain-texture);
      }

      & .logo {
        z-index: 1;
        width: 80%;
        object-fit: contain;
        mix-blend-mode: exclusion;
      }
    }

    & .card-front {
      z-index: 1;
    }
  }
</style>

<script>
  import { CardCategory, cardCategoryColors } from '@contracts/card-category.type';
  import {
    demoCategoryDescriptions,
    demoCategoryIcons,
    demoCategoryImages,
    demoCategoryTitles
  } from '@data/demo-categories';

  const cardContainer = document.querySelector<HTMLDivElement>('.card-sample');
  const card = cardContainer?.querySelector<HTMLDivElement>('.card');

  let currentCategory = cardContainer?.dataset.category as CardCategory;

  const cardTitle = card?.querySelector<HTMLHeadingElement>('.card-front .card-title');
  const cardImage = card?.querySelector<HTMLImageElement>('.card-front .card-image img');
  const cardContent = card?.querySelector<HTMLParagraphElement>('.card-front .card-content');
  const cardCategory = card?.querySelector<HTMLElement>('.card-front .card-category svg');

  function updateCard(category: CardCategory) {
    if (cardContainer) {
      cardContainer.style.setProperty('--category-color', cardCategoryColors[category]);
    }

    if (cardTitle) {
      cardTitle.textContent = `Categoría ${demoCategoryTitles[category]}`;
    }

    if (cardImage) {
      cardImage.src = demoCategoryImages[category];
    }

    if (cardContent) {
      cardContent.textContent = demoCategoryDescriptions[category];
    }

    if (cardCategory) {
      const iconViewBox = category === CardCategory.SPECIAL ? '0 0 58 38' : '0 0 24 24';

      cardCategory.innerHTML = demoCategoryIcons[category];
      cardCategory.setAttribute('viewBox', iconViewBox);
    }
  }

  if (cardContainer && card) {
    new MutationObserver(mutations => {
      mutations
        .filter(
          mutation => mutation.type === 'attributes' && mutation.attributeName === 'data-category'
        )
        .forEach(mutation => {
          const newCategory = (mutation.target as HTMLDivElement).dataset.category as CardCategory;

          if (!currentCategory) {
            card.classList.remove('rotate');
          } else if (currentCategory !== newCategory) {
            card.classList.add('rotate');
            setTimeout(() => card.classList.remove('rotate'), 600);
          }

          setTimeout(() => updateCard(newCategory), 300);
          currentCategory = newCategory;
        });
    }).observe(cardContainer, { attributes: true, childList: false, subtree: false });
  }
</script>
