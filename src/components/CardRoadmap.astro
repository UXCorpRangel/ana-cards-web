---
import { StatusValue, type RoadmapItem } from '@contracts';
import { Icon } from 'astro-icon/components';

const STATUS_TEXT: Record<StatusValue, string> = {
  [StatusValue.COMPLETE]: 'Completado',
  [StatusValue.DEVELOP]: 'En Desarrollo',
  [StatusValue.WAIT]: 'En Espera'
};

const STATUS_ICONS: Record<StatusValue, string> = {
  [StatusValue.COMPLETE]: 'check',
  [StatusValue.DEVELOP]: 'code',
  [StatusValue.WAIT]: 'hourglass'
};

type Props = RoadmapItem;

const { title, date, status, description } = Astro.props;

function getStatusIcon(value: StatusValue) {
  return STATUS_ICONS[value];
}

function getStatusColor(status: StatusValue): string | null {
  const statusKeys = {
    [StatusValue.COMPLETE]: '--lore-color',
    [StatusValue.DEVELOP]: '--harley-color',
    [StatusValue.WAIT]: '--development-color'
  };

  return statusKeys[status] || null;
}
---

<section class="card-roadmap">
  <h3>{title}</h3>
  <div>
    <header>
      <h3>{date}</h3>
      <p style={`--color: var(${getStatusColor(status)})`}>
        <Icon name={`roadmap/${getStatusIcon(status)}`} size={24} />
        <span>{STATUS_TEXT[status]}</span>
      </p>
    </header>
    <p class="description">
      {description}
    </p>
  </div>
</section>

<style>
  .card-roadmap {
    --size: 32px;

    position: relative;
    display: grid;
    gap: 53px;
    opacity: 0.3;
    transition: opacity 300ms ease;
    z-index: 1;

    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: var(--size);
      height: var(--size);
      translate: -2px 15px;
      border: 4px solid transparent;
      background:
        linear-gradient(var(--body-color), var(--body-color)) padding-box,
        var(--rainbow-gradient) border-box;
      border-radius: 50%;
      scale: 0;
      transition: scale 300ms ease;
    }

    @media (min-width: 1200px) {
      grid-template-columns: 1fr 1fr;
      gap: 93px;

      &::before {
        left: 50%;
        translate: -50% 15px;
      }
    }

    @media (max-width: 1199px) {
      --size: 25px;

      padding-left: 3rem;
    }

    &.active {
      opacity: 1;

      &::before {
        scale: 1;
      }
    }

    & > h3 {
      font-family: var(--font-family-primary);
      font-size: 2.5rem;
      font-weight: 500;
      max-width: 380px;
      margin-block: 7px 0;
      text-transform: uppercase;

      @media (min-width: 1200px) {
        margin-inline: auto 0;
        text-align: right;
      }
    }

    header {
      display: flex;
      flex-direction: column;
      gap: 8px;

      @media (min-width: 1200px) {
        flex-direction: row;
        align-items: center;
        gap: 28px;
      }

      h3 {
        font-family: var(--font-family-primary);
        font-size: 3rem;
        margin: 0;
        text-transform: uppercase;
      }

      p {
        display: inline-flex;
        align-items: center;
        gap: 1rem;
        font-family: var(--font-family-secondary);
        text-transform: uppercase;
        background: color-mix(in srgb, var(--color), transparent 80%);
        color: var(--color);
        border: 1px solid var(--color);
        padding: 8px 16px;
        border-radius: 1000px;
        margin: 0;
        width: max-content;
      }
    }

    .description {
      font-family: var(--font-family-secondary);
      font-size: 1.25rem;
    }
  }
</style>
